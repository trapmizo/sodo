<!DOCTYPE html>
<html dir="rtl" lang="ar">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ŸÑÿπÿ®ÿ© ÿßŸÑÿ≥ŸàÿØŸàŸÉŸà</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Arial', sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 20px;
            color: #333;
        }

        .game-container {
            background: white;
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            padding: 30px;
            max-width: 600px;
            width: 100%;
        }

        .header {
            text-align: center;
            margin-bottom: 30px;
        }

        .title {
            font-size: 2.5em;
            color: #667eea;
            margin-bottom: 10px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.1);
        }

        .stats {
            display: flex;
            justify-content: space-around;
            margin-bottom: 20px;
            padding: 15px;
            background: #f8f9ff;
            border-radius: 15px;
        }

        .stat-item {
            text-align: center;
        }

        .stat-value {
            font-size: 1.8em;
            font-weight: bold;
            color: #667eea;
            display: block;
        }

        .stat-label {
            font-size: 0.9em;
            color: #666;
        }

        .controls {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            justify-content: center;
            margin-bottom: 20px;
        }

        .btn {
            padding: 12px 24px;
            border: none;
            border-radius: 25px;
            font-size: 1em;
            cursor: pointer;
            transition: all 0.3s ease;
            font-weight: bold;
        }

        .btn-primary {
            background: linear-gradient(45deg, #667eea, #764ba2);
            color: white;
        }

        .btn-secondary {
            background: #f0f8ff;
            color: #667eea;
            border: 2px solid #667eea;
        }

        .btn-success {
            background: linear-gradient(45deg, #4ECDC4, #44A08D);
            color: white;
        }

        .btn-warning {
            background: linear-gradient(45deg, #FFB74D, #FF9800);
            color: white;
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 16px rgba(0,0,0,0.2);
        }

        .difficulty-selector {
            display: flex;
            gap: 10px;
            justify-content: center;
            margin-bottom: 20px;
        }

        .difficulty-btn {
            padding: 8px 16px;
            border: 2px solid #667eea;
            background: white;
            border-radius: 15px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .difficulty-btn.active {
            background: #667eea;
            color: white;
        }

        .sudoku-grid {
            display: grid;
            grid-template-columns: repeat(9, 1fr);
            gap: 2px;
            background: #333;
            padding: 4px;
            border-radius: 10px;
            margin: 20px auto;
            max-width: 450px;
            aspect-ratio: 1;
        }

        .sudoku-cell {
            background: white;
            border: none;
            font-size: 1.4em;
            font-weight: bold;
            text-align: center;
            cursor: pointer;
            transition: all 0.2s ease;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .sudoku-cell:nth-child(3n):not(:nth-child(9n)) {
            border-left: 3px solid #333;
        }

        .sudoku-cell:nth-child(n+19):nth-child(-n+27),
        .sudoku-cell:nth-child(n+46):nth-child(-n+54) {
            border-top: 3px solid #333;
        }

        .sudoku-cell.given {
            background: #e8f5e8;
            color: #2d7d32;
            font-weight: bold;
        }

        .sudoku-cell.user-input {
            background: #fff3e0;
            color: #f57c00;
        }

        .sudoku-cell.selected {
            background: #bbdefb;
            border: 2px solid #2196f3;
        }

        .sudoku-cell.error {
            background: #ffebee;
            color: #d32f2f;
            animation: shake 0.5s ease-in-out;
        }

        .sudoku-cell.hint {
            background: #f3e5f5;
            color: #7b1fa2;
        }

        .number-pad {
            display: grid;
            grid-template-columns: repeat(5, 1fr);
            gap: 10px;
            margin-top: 20px;
            max-width: 300px;
            margin-left: auto;
            margin-right: auto;
        }

        .number-btn {
            aspect-ratio: 1;
            border: 2px solid #667eea;
            background: white;
            border-radius: 50%;
            font-size: 1.4em;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            color: #667eea;
        }

        .number-btn:hover {
            background: #667eea;
            color: white;
            transform: scale(1.1);
        }

        .message {
            text-align: center;
            margin: 20px 0;
            padding: 15px;
            border-radius: 10px;
            font-weight: bold;
        }

        .message.success {
            background: #e8f5e8;
            color: #2d7d32;
            border: 2px solid #4caf50;
        }

        .message.error {
            background: #ffebee;
            color: #d32f2f;
            border: 2px solid #f44336;
        }

        .message.info {
            background: #e3f2fd;
            color: #1976d2;
            border: 2px solid #2196f3;
        }

        @keyframes shake {
            0%, 100% { transform: translateX(0); }
            25% { transform: translateX(-5px); }
            75% { transform: translateX(5px); }
        }

        @keyframes pulse {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.05); }
        }

        .completed {
            animation: pulse 0.6s ease-in-out;
        }

        .timer {
            font-size: 1.2em;
            font-weight: bold;
            color: #667eea;
        }

        @media (max-width: 480px) {
            .game-container {
                padding: 15px;
            }
            
            .sudoku-cell {
                font-size: 1.2em;
            }
            
            .controls {
                flex-direction: column;
                align-items: center;
            }
            
            .btn {
                width: 100%;
                max-width: 200px;
            }
        }
    </style>
</head>
<body>
    <div class="game-container">
        <div class="header">
            <h1 class="title">üß© ŸÑÿπÿ®ÿ© ÿßŸÑÿ≥ŸàÿØŸàŸÉŸà</h1>
            <p>ÿßŸÖŸÑÿ£ ÿßŸÑÿ¥ÿ®ŸÉÿ© ÿ®ÿßŸÑÿ£ÿ±ŸÇÿßŸÖ ŸÖŸÜ 1 ÿ•ŸÑŸâ 9</p>
        </div>

        <div class="stats">
            <div class="stat-item">
                <span class="stat-value" id="timer">00:00</span>
                <span class="stat-label">ÿßŸÑŸàŸÇÿ™</span>
            </div>
            <div class="stat-item">
                <span class="stat-value" id="mistakes">0</span>
                <span class="stat-label">ÿßŸÑÿ£ÿÆÿ∑ÿßÿ°</span>
            </div>
            <div class="stat-item">
                <span class="stat-value" id="hints">3</span>
                <span class="stat-label">ÿßŸÑÿ™ŸÑŸÖŸäÿ≠ÿßÿ™</span>
            </div>
        </div>

        <div class="difficulty-selector">
            <button class="difficulty-btn active" data-level="easy">ÿ≥ŸáŸÑ</button>
            <button class="difficulty-btn" data-level="medium">ŸÖÿ™Ÿàÿ≥ÿ∑</button>
            <button class="difficulty-btn" data-level="hard">ÿµÿπÿ®</button>
        </div>

        <div class="controls">
            <button class="btn btn-primary" onclick="newGame()">üéÆ ŸÑÿπÿ®ÿ© ÿ¨ÿØŸäÿØÿ©</button>
            <button class="btn btn-secondary" onclick="getHint()">üí° ÿ™ŸÑŸÖŸäÿ≠</button>
            <button class="btn btn-warning" onclick="checkSolution()">‚úÖ ÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿßŸÑÿ≠ŸÑ</button>
            <button class="btn btn-secondary" onclick="clearCell()">üóëÔ∏è ŸÖÿ≥ÿ≠</button>
        </div>

        <div class="sudoku-grid" id="sudokuGrid"></div>

        <div class="number-pad">
            <button class="number-btn" onclick="inputNumber(1)">1</button>
            <button class="number-btn" onclick="inputNumber(2)">2</button>
            <button class="number-btn" onclick="inputNumber(3)">3</button>
            <button class="number-btn" onclick="inputNumber(4)">4</button>
            <button class="number-btn" onclick="inputNumber(5)">5</button>
            <button class="number-btn" onclick="inputNumber(6)">6</button>
            <button class="number-btn" onclick="inputNumber(7)">7</button>
            <button class="number-btn" onclick="inputNumber(8)">8</button>
            <button class="number-btn" onclick="inputNumber(9)">9</button>
            <button class="number-btn" onclick="clearCell()">‚úñ</button>
        </div>

        <div id="message" class="message" style="display: none;"></div>
    </div>

    <script>
        let currentGrid = [];
        let solutionGrid = [];
        let selectedCell = null;
        let gameStartTime = null;
        let timerInterval = null;
        let mistakeCount = 0;
        let hintCount = 3;
        let currentDifficulty = 'easy';

        // ÿ•ŸÜÿ¥ÿßÿ° ÿßŸÑÿ¥ÿ®ŸÉÿ©
        function createGrid() {
            const grid = document.getElementById('sudokuGrid');
            grid.innerHTML = '';
            
            for (let row = 0; row < 9; row++) {
                for (let col = 0; col < 9; col++) {
                    const cell = document.createElement('div');
                    cell.className = 'sudoku-cell';
                    cell.dataset.row = row;
                    cell.dataset.col = col;
                    cell.onclick = () => selectCell(row, col);
                    grid.appendChild(cell);
                }
            }
        }

        // ÿßÿÆÿ™Ÿäÿßÿ± ÿÆŸÑŸäÿ©
        function selectCell(row, col) {
            // ÿ•ÿ≤ÿßŸÑÿ© ÿßŸÑÿ™ÿ≠ÿØŸäÿØ ÿßŸÑÿ≥ÿßÿ®ŸÇ
            document.querySelectorAll('.sudoku-cell').forEach(cell => {
                cell.classList.remove('selected');
            });
            
            // ÿ™ÿ≠ÿØŸäÿØ ÿßŸÑÿÆŸÑŸäÿ© ÿßŸÑÿ¨ÿØŸäÿØÿ©
            const cell = document.querySelector(`[data-row="${row}"][data-col="${col}"]`);
            cell.classList.add('selected');
            selectedCell = { row, col };
        }

        // ÿ•ÿØÿÆÿßŸÑ ÿ±ŸÇŸÖ
        function inputNumber(num) {
            if (!selectedCell) {
                showMessage('ÿßÿÆÿ™ÿ± ÿÆŸÑŸäÿ© ÿ£ŸàŸÑÿßŸã', 'info');
                return;
            }

            const { row, col } = selectedCell;
            const cell = document.querySelector(`[data-row="${row}"][data-col="${col}"]`);
            
            // ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿ£ŸÜ ÿßŸÑÿÆŸÑŸäÿ© ŸÇÿßÿ®ŸÑÿ© ŸÑŸÑÿ™ÿπÿØŸäŸÑ
            if (cell.classList.contains('given')) {
                showMessage('ŸÑÿß ŸäŸÖŸÉŸÜ ÿ™ÿπÿØŸäŸÑ Ÿáÿ∞Ÿá ÿßŸÑÿÆŸÑŸäÿ©', 'error');
                return;
            }

            // Ÿàÿ∂ÿπ ÿßŸÑÿ±ŸÇŸÖ
            currentGrid[row][col] = num;
            cell.textContent = num;
            cell.classList.remove('error', 'hint');
            cell.classList.add('user-input');

            // ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿµÿ≠ÿ© ÿßŸÑÿ±ŸÇŸÖ
            if (!isValidMove(row, col, num)) {
                cell.classList.add('error');
                mistakeCount++;
                updateStats();
                showMessage('Ÿáÿ∞ÿß ÿßŸÑÿ±ŸÇŸÖ ÿ∫Ÿäÿ± ÿµÿ≠Ÿäÿ≠ ŸÅŸä Ÿáÿ∞ÿß ÿßŸÑŸÖŸÉÿßŸÜ', 'error');
            } else {
                // ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿßŸÉÿ™ŸÖÿßŸÑ ÿßŸÑŸÑÿπÿ®ÿ©
                if (isGameComplete()) {
                    completeGame();
                }
            }
        }

        // ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿµÿ≠ÿ© ÿßŸÑÿ≠ÿ±ŸÉÿ©
        function isValidMove(row, col, num) {
            // ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿßŸÑÿµŸÅ
            for (let c = 0; c < 9; c++) {
                if (c !== col && currentGrid[row][c] === num) return false;
            }

            // ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿßŸÑÿπŸÖŸàÿØ
            for (let r = 0; r < 9; r++) {
                if (r !== row && currentGrid[r][col] === num) return false;
            }

            // ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿßŸÑÿµŸÜÿØŸàŸÇ 3x3
            const boxRow = Math.floor(row / 3) * 3;
            const boxCol = Math.floor(col / 3) * 3;
            
            for (let r = boxRow; r < boxRow + 3; r++) {
                for (let c = boxCol; c < boxCol + 3; c++) {
                    if ((r !== row || c !== col) && currentGrid[r][c] === num) return false;
                }
            }

            return true;
        }

        // ŸÖÿ≥ÿ≠ ÿÆŸÑŸäÿ©
        function clearCell() {
            if (!selectedCell) {
                showMessage('ÿßÿÆÿ™ÿ± ÿÆŸÑŸäÿ© ÿ£ŸàŸÑÿßŸã', 'info');
                return;
            }

            const { row, col } = selectedCell;
            const cell = document.querySelector(`[data-row="${row}"][data-col="${col}"]`);
            
            if (cell.classList.contains('given')) {
                showMessage('ŸÑÿß ŸäŸÖŸÉŸÜ ŸÖÿ≥ÿ≠ Ÿáÿ∞Ÿá ÿßŸÑÿÆŸÑŸäÿ©', 'error');
                return;
            }

            currentGrid[row][col] = 0;
            cell.textContent = '';
            cell.classList.remove('user-input', 'error', 'hint');
        }

        // ÿ™ŸÑŸÖŸäÿ≠
        function getHint() {
            if (hintCount <= 0) {
                showMessage('ŸÑÿß ÿ™Ÿàÿ¨ÿØ ÿ™ŸÑŸÖŸäÿ≠ÿßÿ™ ŸÖÿ™ÿ®ŸÇŸäÿ©', 'error');
                return;
            }

            if (!selectedCell) {
                showMessage('ÿßÿÆÿ™ÿ± ÿÆŸÑŸäÿ© ÿ£ŸàŸÑÿßŸã', 'info');
                return;
            }

            const { row, col } = selectedCell;
            const cell = document.querySelector(`[data-row="${row}"][data-col="${col}"]`);
            
            if (cell.classList.contains('given') || currentGrid[row][col] !== 0) {
                showMessage('ÿßÿÆÿ™ÿ± ÿÆŸÑŸäÿ© ŸÅÿßÿ±ÿ∫ÿ©', 'info');
                return;
            }

            const correctNumber = solutionGrid[row][col];
            currentGrid[row][col] = correctNumber;
            cell.textContent = correctNumber;
            cell.classList.add('hint');
            
            hintCount--;
            updateStats();
            showMessage('ÿ™ŸÖ ÿ•ÿπÿ∑ÿßÿ° ÿ™ŸÑŸÖŸäÿ≠!', 'success');

            if (isGameComplete()) {
                completeGame();
            }
        }

        // ÿ•ŸÜÿ¥ÿßÿ° ÿ¥ÿ®ŸÉÿ© ÿ≥ŸàÿØŸàŸÉŸà ÿµÿ≠Ÿäÿ≠ÿ©
        function generateSolvedGrid() {
            const grid = Array(9).fill().map(() => Array(9).fill(0));
            
            function fillGrid(grid) {
                const nums = [1, 2, 3, 4, 5, 6, 7, 8, 9];
                
                for (let row = 0; row < 9; row++) {
                    for (let col = 0; col < 9; col++) {
                        if (grid[row][col] === 0) {
                            // ÿÆŸÑÿ∑ ÿßŸÑÿ£ÿ±ŸÇÿßŸÖ ŸÑŸÑÿ≠ÿµŸàŸÑ ÿπŸÑŸâ ÿ™Ÿàÿ≤Ÿäÿπ ÿπÿ¥Ÿàÿßÿ¶Ÿä
                            for (let i = nums.length - 1; i > 0; i--) {
                                const j = Math.floor(Math.random() * (i + 1));
                                [nums[i], nums[j]] = [nums[j], nums[i]];
                            }
                            
                            for (let num of nums) {
                                if (isValidPlacement(grid, row, col, num)) {
                                    grid[row][col] = num;
                                    if (fillGrid(grid)) {
                                        return true;
                                    }
                                    grid[row][col] = 0;
                                }
                            }
                            return false;
                        }
                    }
                }
                return true;
            }
            
            fillGrid(grid);
            return grid;
        }

        function isValidPlacement(grid, row, col, num) {
            // ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿßŸÑÿµŸÅ
            for (let c = 0; c < 9; c++) {
                if (grid[row][c] === num) return false;
            }

            // ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿßŸÑÿπŸÖŸàÿØ
            for (let r = 0; r < 9; r++) {
                if (grid[r][col] === num) return false;
            }

            // ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿßŸÑÿµŸÜÿØŸàŸÇ 3x3
            const boxRow = Math.floor(row / 3) * 3;
            const boxCol = Math.floor(col / 3) * 3;
            
            for (let r = boxRow; r < boxRow + 3; r++) {
                for (let c = boxCol; c < boxCol + 3; c++) {
                    if (grid[r][c] === num) return false;
                }
            }

            return true;
        }

        // ÿ•ÿ≤ÿßŸÑÿ© ÿ£ÿ±ŸÇÿßŸÖ ŸÖŸÜ ÿßŸÑÿ¥ÿ®ŸÉÿ© ÿ≠ÿ≥ÿ® ÿßŸÑŸÖÿ≥ÿ™ŸàŸâ
        function removeNumbers(grid, difficulty) {
            const puzzleGrid = grid.map(row => [...row]);
            let cellsToRemove;
            
            switch (difficulty) {
                case 'easy': cellsToRemove = 40; break;
                case 'medium': cellsToRemove = 50; break;
                case 'hard': cellsToRemove = 60; break;
                default: cellsToRemove = 40;
            }
            
            const positions = [];
            for (let row = 0; row < 9; row++) {
                for (let col = 0; col < 9; col++) {
                    positions.push([row, col]);
                }
            }
            
            // ÿÆŸÑÿ∑ ÿßŸÑŸÖŸàÿßÿ∂ÿπ
            for (let i = positions.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [positions[i], positions[j]] = [positions[j], positions[i]];
            }
            
            // ÿ•ÿ≤ÿßŸÑÿ© ÿßŸÑÿ£ÿ±ŸÇÿßŸÖ
            for (let i = 0; i < cellsToRemove && i < positions.length; i++) {
                const [row, col] = positions[i];
                puzzleGrid[row][col] = 0;
            }
            
            return puzzleGrid;
        }

        // ŸÑÿπÿ®ÿ© ÿ¨ÿØŸäÿØÿ©
        function newGame() {
            // ÿ•ŸÜÿ¥ÿßÿ° ÿ¥ÿ®ŸÉÿ© ŸÖÿ≠ŸÑŸàŸÑÿ©
            solutionGrid = generateSolvedGrid();
            
            // ÿ•ŸÜÿ¥ÿßÿ° ÿßŸÑÿ£ÿ≠ÿ¨Ÿäÿ©
            currentGrid = removeNumbers(solutionGrid, currentDifficulty);
            
            // ÿπÿ±ÿ∂ ÿßŸÑÿ¥ÿ®ŸÉÿ©
            displayGrid();
            
            // ÿ•ÿπÿßÿØÿ© ÿ™ÿπŸäŸäŸÜ ÿßŸÑÿ•ÿ≠ÿµÿßÿ¶Ÿäÿßÿ™
            mistakeCount = 0;
            hintCount = 3;
            gameStartTime = Date.now();
            updateStats();
            startTimer();
            
            // ÿ•ÿÆŸÅÿßÿ° ÿßŸÑÿ±ÿ≥ÿßÿ¶ŸÑ
            hideMessage();
            
            showMessage('ŸÑÿπÿ®ÿ© ÿ¨ÿØŸäÿØÿ© ÿ®ÿØÿ£ÿ™! ÿ≠ÿ∏ÿßŸã ÿ≥ÿπŸäÿØÿßŸã!', 'success');
        }

        // ÿπÿ±ÿ∂ ÿßŸÑÿ¥ÿ®ŸÉÿ©
        function displayGrid() {
            const cells = document.querySelectorAll('.sudoku-cell');
            
            for (let row = 0; row < 9; row++) {
                for (let col = 0; col < 9; col++) {
                    const cell = cells[row * 9 + col];
                    const value = currentGrid[row][col];
                    
                    if (value !== 0) {
                        cell.textContent = value;
                        cell.classList.add('given');
                        cell.classList.remove('user-input', 'error', 'hint');
                    } else {
                        cell.textContent = '';
                        cell.classList.remove('given', 'user-input', 'error', 'hint');
                    }
                }
            }
        }

        // ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿßŸÉÿ™ŸÖÿßŸÑ ÿßŸÑŸÑÿπÿ®ÿ©
        function isGameComplete() {
            for (let row = 0; row < 9; row++) {
                for (let col = 0; col < 9; col++) {
                    if (currentGrid[row][col] === 0) return false;
                }
            }
            return true;
        }

        // ÿ•ŸÉŸÖÿßŸÑ ÿßŸÑŸÑÿπÿ®ÿ©
        function completeGame() {
            clearInterval(timerInterval);
            document.querySelector('.sudoku-grid').classList.add('completed');
            
            const timeElapsed = formatTime(Math.floor((Date.now() - gameStartTime) / 1000));
            showMessage(`üéâ ŸÖÿ®ÿ±ŸàŸÉ! ÿ£ŸÉŸÖŸÑÿ™ ÿßŸÑŸÑÿπÿ®ÿ© ŸÅŸä ${timeElapsed} ŸÖÿπ ${mistakeCount} ÿ£ÿÆÿ∑ÿßÿ°`, 'success');
            
            // ÿ™ÿ£ÿ´Ÿäÿ± ÿ®ÿµÿ±Ÿä
            setTimeout(() => {
                document.querySelector('.sudoku-grid').classList.remove('completed');
            }, 2000);
        }

        // ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿßŸÑÿ≠ŸÑ
        function checkSolution() {
            let hasErrors = false;
            const cells = document.querySelectorAll('.sudoku-cell');
            
            // ÿ•ÿ≤ÿßŸÑÿ© ÿ™ÿ£ÿ´Ÿäÿ±ÿßÿ™ ÿßŸÑÿ£ÿÆÿ∑ÿßÿ° ÿßŸÑÿ≥ÿßÿ®ŸÇÿ©
            cells.forEach(cell => cell.classList.remove('error'));
            
            for (let row = 0; row < 9; row++) {
                for (let col = 0; col < 9; col++) {
                    const value = currentGrid[row][col];
                    if (value !== 0 && !isValidMove(row, col, value)) {
                        const cell = cells[row * 9 + col];
                        cell.classList.add('error');
                        hasErrors = true;
                    }
                }
            }
            
            if (hasErrors) {
                showMessage('ŸáŸÜÿßŸÉ ÿ£ÿÆÿ∑ÿßÿ° ŸÅŸä ÿßŸÑÿ≠ŸÑ. ÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿßŸÑÿÆŸÑÿßŸäÿß ÿßŸÑŸÖŸÖŸäÿ≤ÿ© ÿ®ÿßŸÑÿ£ÿ≠ŸÖÿ±', 'error');
            } else if (isGameComplete()) {
                showMessage('ÿßŸÑÿ≠ŸÑ ÿµÿ≠Ÿäÿ≠ ŸàŸÖŸÉÿ™ŸÖŸÑ! üéâ', 'success');
            } else {
                showMessage('ÿßŸÑÿ≠ŸÑ ÿµÿ≠Ÿäÿ≠ ÿ≠ÿ™Ÿâ ÿßŸÑÿ¢ŸÜ. ÿ£ŸÉŸÖŸÑ ÿ®ÿßŸÇŸä ÿßŸÑÿÆŸÑÿßŸäÿß!', 'info');
            }
        }

        // ÿ™ÿ≠ÿØŸäÿ´ ÿßŸÑÿ•ÿ≠ÿµÿßÿ¶Ÿäÿßÿ™
        function updateStats() {
            document.getElementById('mistakes').textContent = mistakeCount;
            document.getElementById('hints').textContent = hintCount;
        }

        // ÿ®ÿØÿ° ÿßŸÑŸÖÿ§ŸÇÿ™
        function startTimer() {
            clearInterval(timerInterval);
            timerInterval = setInterval(() => {
                const elapsed = Math.floor((Date.now() - gameStartTime) / 1000);
                document.getElementById('timer').textContent = formatTime(elapsed);
            }, 1000);
        }

        // ÿ™ŸÜÿ≥ŸäŸÇ ÿßŸÑŸàŸÇÿ™
        function formatTime(seconds) {
            const mins = Math.floor(seconds / 60);
            const secs = seconds % 60;
            return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
        }

        // ÿπÿ±ÿ∂ ÿ±ÿ≥ÿßŸÑÿ©
        function showMessage(text, type) {
            const messageEl = document.getElementById('message');
            messageEl.textContent = text;
            messageEl.className = `message ${type}`;
            messageEl.style.display = 'block';
            
            setTimeout(() => {
                hideMessage();
            }, 3000);
        }

        // ÿ•ÿÆŸÅÿßÿ° ÿßŸÑÿ±ÿ≥ÿßŸÑÿ©
        function hideMessage() {
            document.getElementById('message').style.display = 'none';
        }

        // ÿ™ÿ∫ŸäŸäÿ± ŸÖÿ≥ÿ™ŸàŸâ ÿßŸÑÿµÿπŸàÿ®ÿ©
        document.querySelectorAll('.difficulty-btn').forEach(btn => {
            btn.addEventListener('click', () => {
                document.querySelectorAll('.difficulty-btn').forEach(b => b.classList.remove('active'));
                btn.classList.add('active');
                currentDifficulty = btn.dataset.level;
            });
        });

        // ÿßŸÑÿ™ÿ≠ŸÉŸÖ ÿ®ÿßŸÑŸÉŸäÿ®Ÿàÿ±ÿØ
        document.addEventListener('keydown', (e) => {
            if (e.key >= '1' && e.key <= '9') {
                inputNumber(parseInt(e.key));
            } else if (e.key === 'Delete' || e.key === 'Backspace') {
                clearCell();
            }
        });

        // ÿ®ÿØÿ° ÿßŸÑŸÑÿπÿ®ÿ©
        createGrid();
        newGame();
    </script>
</body>
</html>